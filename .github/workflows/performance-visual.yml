# Performance and Visual Regression Testing
# Runs performance audits and visual regression tests
# Includes Lighthouse CI, Core Web Vitals monitoring, and Playwright visual tests

name: Performance & Visual Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC for performance monitoring
    - cron: "0 2 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"

jobs:
  # Lighthouse CI performance testing
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  # Performance budget validation
  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Check performance budget
        run: npm run performance:check

      - name: Validate bundle sizes
        run: npm run performance:analyze

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # Visual regression testing
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run visual regression tests
        run: npx playwright test visual-regression.spec.ts --project=${{ matrix.browser }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

      - name: Upload visual regression report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  # Core Web Vitals monitoring
  core-web-vitals:
    name: Core Web Vitals Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Measure Core Web Vitals
        run: npm run performance:vitals

      - name: Upload Core Web Vitals results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: core-web-vitals
          path: vitals-results/
          retention-days: 30

  # Performance regression detection
  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build current version
        run: npm run build

      - name: Measure current performance
        run: npm run performance:measure
        env:
          RESULTS_FILE: current-performance.json

      - name: Checkout base branch
        run: git checkout ${{ github.base_ref }}

      - name: Install base dependencies
        run: npm ci

      - name: Build base version
        run: npm run build

      - name: Measure base performance
        run: npm run performance:measure
        env:
          RESULTS_FILE: base-performance.json

      - name: Compare performance
        run: npm run performance:compare

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = './performance-comparison.json';

            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const comment = `## Performance Comparison

              | Metric | Base | Current | Change |
              |--------|------|---------|--------|
              | Lighthouse Score | ${results.base.lighthouse} | ${results.current.lighthouse} | ${results.change.lighthouse} |
              | First Contentful Paint | ${results.base.fcp} | ${results.current.fcp} | ${results.change.fcp} |
              | Largest Contentful Paint | ${results.base.lcp} | ${results.current.lcp} | ${results.change.lcp} |
              | Cumulative Layout Shift | ${results.base.cls} | ${results.current.cls} | ${results.change.cls} |
              | Bundle Size | ${results.base.bundleSize} | ${results.current.bundleSize} | ${results.change.bundleSize} |

              ${results.regression ? '⚠️ **Performance regression detected!**' : '✅ **No performance regression detected**'}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Accessibility performance integration
  accessibility-performance:
    name: Accessibility Performance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run accessibility tests with performance tracking
        run: npm run test:accessibility:performance

      - name: Upload accessibility performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-performance-results
          path: accessibility-performance-results/
          retention-days: 30
